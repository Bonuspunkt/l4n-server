// generated file do not modify
const path = require('path');
const webpack = require('webpack');
const ExtractTextPlugin = require('extract-text-webpack-plugin');

const outputPath = path.resolve(__dirname, 'wwwRoot');

const isDebug = process.argv.includes('-d');

const exclude = module => {
    return /node_modules[\\/]l4n-/.test(module)
        ? false
        : /node_modules/.test(module);
};

const resolve = {
    alias: {
${aliases}
        '*routes': path.resolve(__dirname, 'wwwScript/routes.jsx'),
    },
    extensions: ['.js', '.jsx'],
    modules: ['node_modules'],
    symlinks: false,
};

module.exports = [{
    entry: path.resolve(__dirname, 'wwwScript/main.jsx'),
    output: {
        path: path.resolve(__dirname, 'wwwRoot'),
        filename: 'script.js',
    },
    module: {
        rules: [
            {
                test: /\.jsx?$/,
                exclude,
                loader: 'babel-loader',
                query: {
                    presets: [
                        require('babel-preset-react'),
                        require('babel-preset-env')
                    ],
                    plugins: [
                        // still stage 3, will hopefully be soon included in env
                        require('babel-plugin-transform-object-rest-spread'),
                    ],
                },
            },
            {
                test: /\.styl$/,
                use: ExtractTextPlugin.extract({
                    fallback: 'universal-style-loader',
                    use: ['css-loader', 'stylus-loader'],
                }),
            },
        ],
    },
    resolve,
    plugins: [
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify(isDebug ? 'development' : 'production'),
            'process.env.BROWSER': JSON.stringify(true),
        }),
        new ExtractTextPlugin('stylesheet.css', { allChunks: true }),
    ],
}, {
    entry: path.resolve(__dirname, 'node_modules/l4n-server/wwwScript/App.jsx'),
    output: {
        path: path.resolve(__dirname, 'wwwScript'),
        filename: 'App.js',
        libraryTarget: 'commonjs-module'
    },
    target: 'node',
    module: {
        rules: [
            {
                test: /\.jsx?$/,
                exclude,
                loader: 'babel-loader',
                query: {
                    presets: [
                        require('babel-preset-react'),
                    ],
                    plugins: [
                        require('babel-plugin-transform-es2015-modules-commonjs'),
                        // still stage 3, will hopefully be soon included in env
                        require('babel-plugin-transform-object-rest-spread'),
                    ],
                },
            },
            {
                test: /\.styl$/,
                use: ExtractTextPlugin.extract({
                    fallback: 'universal-style-loader',
                    use: ['css-loader', 'stylus-loader'],
                }),
            },
        ],
    },
    resolve,
    plugins: [
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify('production'),
            'process.env.BROWSER': JSON.stringify(false),
        }),
        new ExtractTextPlugin('stylesheet.css', { allChunks: true }),
    ],

}];
